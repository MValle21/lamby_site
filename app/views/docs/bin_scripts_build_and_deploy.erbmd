
# Bin Scripts (Build & Deploy)

Our <%= doc_link(:quick_start) %> cookiecutter includes a single `bin/deploy` script that wraps three SAM commands needed to deploy your application.

* [sam build](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-build.html)
* [sam package](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-package.html)
* [sam deploy](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-deploy.html)

Think of our provided bin scripts as starting points! You should add to or adjust each to meet your needs. Well maintained deploy scripts are critical to good [CI/CD](https://en.wikipedia.org/wiki/CI/CD) practices no matter if they are used from your personal machine or automated via [GitHub Actions](https://technology.customink.com/blog/2019/09/02/from-travis-ci-to-github-actions/). From a Lamby perspective, here are a few helpful topics about our deploy process.

- [Overview of Deploy Process](#overview-of-deploy-process)
- [CloudFormation Bucket](#cloudformation-bucket)
- [Multiple Environments](#multiple-environments)

## Overview of Deploy Process

Remember, our Docker usage plays a major role here. Especially with shared git/aws credentials & environment variables.

* Cleanup `vendor/bundle` directory.
* Copy project to nested `.aws-sam` directory.
* Bundle install for deployment.
* Retrieve `RAILS_MASTER_KEY` from SSM. Write to env file.
* Precompile assets. Clean app & vendor assets for space.
* Clean unused gems from vendor bundle directory.
* Package and Deploy via SAM.

## Using Private Gems on GitHub

Even though we do share your git setup with the Docker container, you may have auth issues accessing them. This may be more so true on CI/CD systems. One [solution we like](https://medium.com/@frodsan/installing-a-gem-from-a-private-github-repo-heroku-a895073ae7d) requires adding this line prior to the build's bundle deployment step.

```shell
bundle config --local GITHUB__COM "$(git config github.token):x-oauth-basic"
```

It sets a Bundler config to use your personal GitHub OAuth token. Make sure to set that up [using this GitHub help article](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line). Lastly, make sure your `Gemfile` uses this git source format. Most newer Rails apps do this already.

```ruby
git_source(:github) { |repo| "https://github.com/#{repo}.git" }
```

## CloudFormation Bucket

Your code needs to be packaged and uploaded to an S3 bucket prior to being deployed. We dynamically create a bucket name during the cookiecutter bootstrap script. This bucket name is saved in a `.bucket-name` file in your project. **It is a great idea for you to change this to something that makes sense for you!** If you have the [AWS CLI](<%= doc_lpath(:installing_aws_sam) %>) installed, creating a bucket is a simple command like so.

```shell
$ aws s3 mb cloudformation.mycomany.com
```

## Multiple Environments

Feel free to make more per-environment deploy scripts. For example `bin/deploy-staging` may look like this. The `AWS_PROFILE` is an useful environment variable that helps you manage different AWS accounts via all CLI tools. We pass `AWS_PROFILE` and `RAILS_ENV` via our docker compose scripts. Learn more about [AWS Environment Variables](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html).

```shell
#!/bin/bash
set -e
export AWS_PROFILE="staging"
export RAILS_ENV="staging"
./bin/deploy
```

<%= doc_next :environment_and_configuration %>
<%= disqus %>
