
# ActiveJob & Lambda

Background tasks with ActiveJob on AWS Lambda is a reimagination of the problem for Rails. Instead of starting up long running process that poll for work, we instead use the event-driven architecture of AWS Lambda to our advantage.

Thanks to tools like [Simple Queue Service](https://aws.amazon.com/sqs/), [Lambda Destinations](https://aws.amazon.com/blogs/compute/introducing-aws-lambda-destinations/) and SAM, you can quickly setup infrastructure to manage ActiveJob with Rails on Lambda. Assuming you have already run through our <%= doc_link :quick_start %> guide, here are the steps needed to get started.

1. [Add & Configure Shoryuken](#1-add-configure-shoryuken)
2. [New SQS Queue & RailsLambda Policies](#2-new-sqs-queue-railslambda-policies)
3. [New JobsLambda](#3-new-jobslambda)
4. [SAM Build & Jobs Handler](#4-sam-build-jobs-handler)
5. [Concurency & Error Handling](#5-concurency-error-handling)
6. [Advanced Topics & Resources](#6-advanced-topics-resources)

## 1️⃣ Add & Configure Shoryuken

The [Shoryuken](https://github.com/phstc/shoryuken) gem provides easy integration with ActiveJob and SQS. Add it and the `aws-sdk-sqs` gems to your `Gemfile`.

```ruby
gem 'shoryuken'
gem 'aws-sdk-sqs'
```

Open your `config/environments/production.rb` file and add the following configurations. This sets the ActiveJob queue adapter to Shoryuken for production. It also disabled ActiveJob's logging but dont worry, we will get that back later.

```ruby
config.active_job.queue_adapter = :shoryuken
ActiveJob::Base.logger = Logger.new(IO::NULL)
```

Open your `app/jobs/application_job.rb` file and ensure the `queue_as` is set to the same `JOBS_QUEUE_NAME` environment variable. We will show where this comes form in the next step.

```ruby
class ApplicationJob < ActiveJob::Base
  queue_as ENV['JOBS_QUEUE_NAME']
end
```

## 2️⃣ New SQS Queue & RailsLambda Policies

Now we need an SQS queue to push our events to. Add this to the end of the `Resources` section. This will instruct CloudFormation to create a SQS queue on our next deploy. Within the `template.yaml` file:

```yaml
JobsQueue:
  Type: AWS::SQS::Queue
```

Our `RailsLambda` needs to know the name of this queue. Easy, we can pass that as an environment variable. That is where the `JOBS_QUEUE_NAME` value comes from. To do that, we use CloudFormation's intrinsic functions to get the name of the queue created above. Add this line to the `Variables` section under `Environment` of your `RailsLambda` resource.

```yaml
JOBS_QUEUE_NAME: !GetAtt JobsQueue.QueueName
```

Next the `RailsLambda` execution role will need permission to send messages to this SQS queue. The Shoryuken gem requires a handful of permissions so we have to use a full policy statement. If you do not have a `Policies` section under the `Properties` of your `RailsLambda` resoruce, add one, then add this policy to it.

```yaml
Policies:
  - Version: "2012-10-17"
    Statement:
      - Effect: Allow
        Action:
          - sqs:GetQueueUrl
          - sqs:GetQueueAttributes
          - sqs:SendMessage*
        Resource:
          - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${JobsQueue.QueueName}
```

## 3️⃣ New JobsLambda

We need another Lambda to respond to our new SQS events. Ideally one with the same application code. Why another vs reusing the Rails web Lambda? Creating a new one allows everything from timeouts, memory, and much more to be configured differently.  Our `JobsLambda` will mostly be a copy of the `RailsLambda` and in some cases changes to one's properties will be needed for the other. Within the `template.yaml` file, add this below your `RailsLambda` resource.

```yaml
JobsLambda:
  Type: AWS::Serverless::Function
  Metadata:
    BuildMethod: makefile
  Properties:
    AutoPublishAlias: live
    CodeUri: .
    Environment:
      Variables:
        RAILS_ENV: !Ref RailsEnv
    Events:
      SQSJobs:
        Type: SQS
        Properties:
          Queue: !GetAtt JobsQueue.Arn
          BatchSize: 1
    FunctionName: !Sub myapp-${RailsEnv}-jobs
    Handler: app.jobs
    MemorySize: 512
    Policies:
      - SQSPollerPolicy:
          QueueName: !GetAtt JobsQueue.QueueName
    Runtime: ruby2.7
    Timeout: 29
```

**Some important call outs include:**

- Our jobs SQS queue will trigger this function for every job in the queue via the `Events` property.
- The `Timeout` is intentionally set to 1 second less (29) than the default of the SQS' `VisibilityTimeout` which defaults to 30 seconds.
- Please change the `myapp-` prefix in the `FunctionName` to match your own `RailsLambda` name.
- If your `RailsLambda` uses MySQL like our <%= doc_link :database_options %> outlines, then other properties like a `VpcConfig` will be needed for this job function to work as expected.
- We leveraged SAM's [policy templates](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html) to ensure this Lambda can be invoked by our SQS events.
- Order of the resources in the `template.yaml` file is important! When you are done, your top level resources should be ordered like this below. Where your `RailsLambda` is above your `JobsLambda`. This allows `sam build` to build our web Lambda first so we can copy that code for our jobs Lambda.

```yaml
Resources:
  RailsLambda: ...
  RailsHttpApi: ...
  JobsLambda: ...
  JobsQueue: ...
```

## 4️⃣ SAM Build & Jobs Handler

The new jobs function above configures the `Handler` property to use the same `app.rb` at the root of your project. But to a method called `jobs` vs `handler`. Open up your `app.rb` file now and add this new method. It will be called for each message from SQS. Notice how the `event` object contains an array of records. In this example it will only ever be one job since `BatchSize` is set to `1` in the `JobsLambda` event source. Lastly, the `puts` here will ensure we have clean JSON output to our CloudWatch logs for good <%= doc_link :logging_metrics_observability %> practices.

```ruby
def jobs(event:, context:)
  event['Records'].each do |record|
    puts record['body']
    job_data = JSON.parse record['body']
    ActiveJob::Base.execute(job_data)
  end
end
```

Each of these Lambda functions use [SAM's Makefile](https://github.com/awslabs/aws-sam-cli/releases/tag/v0.51.0) build method. To avoid rebuilding the same function code twice, we will copy the `RailsLambda` build files. This is why order was important. Open your project's `Makefile` and add this to it. **Make sure to use tabs vs. spaces for that second line!**

```make
build-JobsLambda:
  ./bin/build-jobs "$(ARTIFACTS_DIR)"
```

Now duplicate the `bin/build-rails` file and rename it to `bin/build-jobs` with the following contents. Effectively doing our source copy from the prior Lambda build.

```shell
#!/usr/bin/env bash
set -e
ARTIFACTS_DIR=$1
cd "$ARTIFACTS_DIR"
cp -r ../RailsLambda/. .
```

From this point you can now run `bin/setup` and `bin/deploy` and test that this is working.

## 5️⃣ Concurency & Error Handling

When SQS invokes your Lambda it does so asynchronously. If needed, additional simultaneous functions are invoked to handle the load until your account's limit or your Lambda's [ReservedConcurrentExecutions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-reservedconcurrentexecutions) limit is reached.

By default, Lambda retries an asynchronous invocation twice if the function returns an error. If all your concurrent invocations are busy, it retains events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous invocation queue for too long, Lambda discards it.

All these behaviors can be configured to your liking using [EventInvokeConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventinvokeconfig.html) and/or [Lambda Destinations](https://aws.amazon.com/blogs/compute/introducing-aws-lambda-destinations/). It is even possible to send successful or failed events to either an SNS or SQS queue for later processing.

```yaml
ReservedConcurrentExecutions: 100
EventInvokeConfig:
  MaximumEventAgeInSeconds: 7200 # Two Hours
  MaximumRetryAttempts: 2
  DestinationConfig:
    OnSuccess: { Type: SQS }
    OnFailure: { Type: SQS }
```

## 6️⃣ Advanced Topics & Resources

If you are using ActionMailer with ActiveJob & Shoryuken, you must set the delviery queue name in your production environment file.

```ruby
config.action_mailer.deliver_later_queue_name = ENV['JOBS_QUEUE_NAME']
```

Standard SQS do not guarantee message ordering. It is also possible that [messages could delivered more than once](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/standard-queues.html#standard-queues-at-least-once-delivery) if needed, consider setting the [FifoQueue](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html) attribute for your queue. FIFO Queues are limited to 300 transactions per second (TPS) and in some cases you may need multiple queues. Thankfully, ActiveJob makes partitioning your work easy. Some additional reading on the topic.

- [Asynchronous Invocation for Lambda](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html)
- [AWS::SQS::QueueCouldFormation Docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html)
- [Using AWS Lambda with Amazon SQS](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html)
- [Shoryuken Best Practices](https://github.com/phstc/shoryuken/wiki/Best-Practices)
- [Shoryuken FIFO Queues](https://github.com/phstc/shoryuken/wiki/FIFO-Queues)
- [Using Ruby and Amazon SQS FIFO Queues](http://www.pablocantero.com/blog/2017/08/06/using-ruby-and-amazon-sqs-fifo-queues/)




<%= doc_next :logging_metrics_observability %>
<%= disqus %>
